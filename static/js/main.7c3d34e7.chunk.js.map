{"version":3,"sources":["serviceWorker.js","Components/addMail.js","Components/addPeople.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","customStyles","content","top","left","right","bottom","marginRight","transform","height","width","AddMail","props","state","modalIsOpen","people","nameInput","numInput","tagsInput","list","edit","addMail","bind","openModal","afterOpenModal","closeModal","this","setState","inputType","input","subtitle","style","color","inputArray","found","alert","n","length","parseInt","push","val","filter","e","onClick","submit","map","remove","isOpen","onAfterOpen","onRequestClose","contentLabel","ref","id","name","value","onChange","changeInput","target","disabled","selected","type","min","class","for","React","Component","AddPeople","personInput","add","peopleArray","inputId","App","step","addedStep","back","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c3d34e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-modal';\r\nimport './addMail.css';\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-20%',\r\n    transform             : 'translate(-50%, -50%)',\r\n    height                : '95%',\r\n    width                 : '95%'\r\n  }\r\n};\r\n\r\nclass AddMail extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      modalIsOpen: false,\r\n      people:this.props.people,\r\n      nameInput: \"\",\r\n      numInput: 0,\r\n      tagsInput: \"\", \r\n      list: [],\r\n      edit:1\r\n    };\r\n\r\n    this.addMail=this.addMail.bind(this);\r\n    this.openModal = this.openModal.bind(this);\r\n    this.afterOpenModal = this.afterOpenModal.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n   \r\n  }\r\n \r\n  openModal() {\r\n    this.setState({modalIsOpen: true});\r\n  }\r\n  //Change both inputs and set state(value of input relies on state)\r\n  changeInput(inputType, input) {\r\n    this.setState({\r\n      [inputType]: input,\r\n    });\r\n  }\r\n  \r\n \r\n  afterOpenModal() {\r\n    \r\n    this.subtitle.style.color = '#f00';\r\n  }\r\n \r\n  closeModal() {\r\n    this.setState({modalIsOpen: false});\r\n  }\r\n\r\n\r\n  addMail(){\r\n    let inputArray = this.state.list;\r\n    //found=0 when that person is not present on list already\r\n    let found = 0;\r\n    \r\n    if(this.state.edit==1){ //Not wanting to edit an existing line\r\n    \r\n      //check for empty inputs\r\n      if(this.state.nameInput==\"\" ){\r\n        alert(\"Select a Person\");\r\n      }else if(this.state.numInput==0){\r\n        alert(\"How Much Mail?\");\r\n      }else{ \r\n\r\n      //looking if that person exists on the list\r\n      for (let n=0; n<inputArray.length; n++){\r\n        //person exists\r\n        if(this.state.nameInput===inputArray[n][0]){ \r\n          //add more mail to that existing person\r\n          inputArray[n][1]=parseInt(this.state.numInput)+parseInt(inputArray[n][1]);\r\n          found=1;\r\n          break;\r\n        }\r\n      }\r\n      //add a line of mail for new person\r\n      if (found==0) {\r\n        inputArray.push([this.state.nameInput,this.state.numInput]);\r\n      }\r\n      }\r\n    } else{ //making edit to existing line\r\n      //find the line to be edited and change the numInput\r\n      for (let n=0; n<inputArray.length; n++){ \r\n        if(this.state.nameInput===inputArray[n][0]){\r\n          inputArray[n][1]=parseInt(this.state.numInput);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    //reset states for inputs and update mail list state\r\n    this.setState({\r\n      list: inputArray,\r\n      nameInput: \"\",\r\n      numInput: 0                                                                       \r\n    });\r\n  }\r\n  \r\n  //find that line in the list, filter it out, and update the list state \r\n  remove(val){\r\n    let inputArray = this.state.list;\r\n    inputArray = inputArray.filter(e => e !== val); \r\n    this.setState({\r\n      list: inputArray, \r\n    });\r\n    \r\n  }\r\n  edit(val){\r\n   //opens modal w/ the inputs changed to the current lines values\r\n    this.openModal();\r\n    this.setState({\r\n      nameInput:val[0],\r\n      numInput:val[1],\r\n      edit:0 //tells the addMail function that a change is being made/ dont add a new line\r\n    });\r\n    \r\n  }\r\n\r\n \r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <button onClick={this.openModal}>Add Mail</button>\r\n        <button onClick={this.submit}>Submit</button>\r\n        <ul>\r\n          \r\n        </ul>\r\n\r\n\r\n        <table style={{width: \"100%\"}}>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>How Much Mail?</th> \r\n            <th>Tags</th>\r\n          </tr>\r\n\r\n          {this.state.list.map(val => (\r\n            <tr>\r\n              <td>{val[0]}</td>\r\n              <td>{val[1]}</td>\r\n              <td>{val[1]}</td>\r\n              <button\r\n                onClick={() => {\r\n                  this.remove(val);\r\n                }}\r\n              >\r\n                X\r\n              </button>\r\n              { <button\r\n                onClick={() => {\r\n                  this.edit(val);\r\n                }}\r\n              >\r\n                Edit\r\n              </button> }\r\n            </tr>\r\n          ))}\r\n          \r\n          \r\n        </table>\r\n\r\n\r\n        <Modal\r\n          isOpen={this.state.modalIsOpen}\r\n          onAfterOpen={this.afterOpenModal}\r\n          onRequestClose={this.closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n          \r\n          <h2 ref={subtitle => this.subtitle = subtitle}>Hello</h2>\r\n          <button onClick={this.closeModal}>X</button>\r\n          <div>Who got mail?</div>\r\n          <form >\r\n          <select id='nameInput' name=\"People\" value={this.state.nameInput} onChange={e => {\r\n            this.changeInput(e.target.id, e.target.value);\r\n          }}>\r\n           <option value=\"\" disabled selected>    </option>\r\n           {this.state.people.map(val=>(\r\n                <option value={val}>{val}</option>\r\n            ))}\r\n            \r\n           \r\n          </select><br></br>\r\n          <br></br>\r\n          \r\n            <p>How much mail?</p><input id=\"numInput\" value={this.state.numInput} type=\"number\" min=\"0\" onChange={e => { this.changeInput(e.target.id, e.target.value); }}/><br></br>\r\n            <br></br>\r\n            <div>\r\n\r\n            <ul class=\"ks-cboxtags\" >\r\n              <li><input type=\"checkbox\" id=\"checkboxOne\" value=\"Spam\" ></input><label for=\"checkboxOne\">Spam</label></li>\r\n              <li><input type=\"checkbox\" id=\"checkboxTwo\" value=\"Bill\"></input><label for=\"checkboxTwo\">Bill</label></li>\r\n              <li><input type=\"checkbox\" id=\"checkboxThree\" value=\"Package\"></input><label for=\"checkboxThree\">Package</label></li>\r\n              <li><input type=\"checkbox\" id=\"checkboxFour\" value=\"Other\" ></input><label for=\"checkboxFour\">Other</label></li>\r\n              <input id=\"name2\" name=\"name2\" disabled=\"disabled\"/>\r\n\r\n            </ul>\r\n            </div>\r\n           \r\n            <button type=\"button\" onClick={this.addMail}>Add</button>\r\n            <button type='reset' >Reset</button>\r\n          </form>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default AddMail;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass AddPeople extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            people:this.props.people,\r\n            personInput:\"\",\r\n        };\r\n        this.changeInput=this.changeInput.bind(this);\r\n        this.add=this.add.bind(this);\r\n       \r\n    }\r\n    \r\n    add(){\r\n        let peopleArray=this.state.people;\r\n        peopleArray.push(this.state.personInput);\r\n        this.setState({\r\n            people: peopleArray,\r\n            personInput: \"\"\r\n        });\r\n    }\r\n    changeInput(inputId, input){\r\n        this.setState({\r\n            [inputId]: input,\r\n            \r\n          });\r\n    }\r\n    \r\n  \r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>Add Some Members To Your Household</h1>\r\n            \r\n            <input \r\n            type=\"text\" id=\"personInput\" \r\n            value={this.state.personInput}\r\n            onChange={e => {\r\n                this.changeInput(e.target.id, e.target.value);\r\n              }}></input>\r\n            <button onClick={this.add}>Add</button>\r\n             \r\n            <br></br>\r\n            <ul>\r\n            {this.state.people.map(val=>(\r\n                <li>{val}</li>\r\n            ))}\r\n        \r\n         </ul>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddPeople;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AddPeople from './Components/addPeople';\nimport AddMail from './Components/addMail';\n\nclass App extends React.Component{\n    constructor(){\n        super();\n        this.state= {\n            people:[],\n            personInput:\"\",\n            step:0\n        }; \n\n        this.submit=this.submit.bind(this);\n    }\n    \n    \n    submit(){\n        let addedStep = this.state.step +1;\n        this.setState({\n            step:addedStep\n        })\n    }\n    \n  \n\n    render(){\n        \n        if(this.state.step==0){\n        return(\n        <div>\n           \n            <AddPeople\n                people={this.state.people}\n            ></AddPeople>\n            \n            <br></br>\n            <button onClick={this.submit}>Submit</button>\n        </div>\n        )\n        }else if(this.state.step==1){\n            return(\n                <div>\n                <AddMail\n                people={this.state.people}\n                ></AddMail>\n                <br></br>\n                <button onClick={this.submit}>Submit</button>\n                <br></br>\n                <button onClick={this.back}>Add More People</button>\n                </div>\n            )\n        }else{\n            return(\n                <div>Success</div>\n            )\n        }\n    }\n\n}\nexport default App;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Hello from './Components/addMail';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}